/** * Created by marszed on 16/4/14. */define(function (require, exports, module) {	var template = require('template'),		$ = require('jquery'),		layer = require('layer'),		global = require('global'),		GiGoldTool = new global.GiGoldTool(),		common = require('common'),		GiGoldPay = new common.GiGoldPay(),		$side = $('#sideMenu'),		$ctBody = $('#ctBody'),		$fixLayer = $('#fixLayer'),		waitTime = 2000;	//CACHE DATA	var cacheData = {},shutdata = {},rspDicList = [],allSysInfo;	//INTERFACE LOCK	var queryByConditionLock = false,		getAllSysInfoLock = false,		addInterfaceLock = false,		getProInfoBySysIdLock = false,		deleteInterFaceByIdLock = false,		delrspcdbyidLock = false,		queryInterFaceByIdLock = false,		updateInterFaceLock = false,		getinvokerlistLock = false,		sheetlistLock = false,		getIfsysFeedLock = false,		sheetFirstListLock = false,		getIFFieldsLock = false,		updateIFFieldsLock = false,		deleteFieldByLevelLock = false,		addinvokerLock = false,		getInterfaceChangesLock = false,		getInterFaceFieldsJsonLock2 = false,		getInterFaceFieldsJsonLock = false,		getTestingProgressLock = false,		getHistoricalReturnCodeLock = false,		updateIFRspCodeLock = false;	//ACTION	(function action(){		$(document).on('click','#getNewData',function(){			ifSys.sheetFirstList({data:{				size: '15'			}});		});		$(document).on('click','#developMsg',function(){			var $this = $(this);			if(!$this.hasClass('develop-active')){				$this.addClass('develop-active');				$('#developLayer').fadeIn(200);			} else {				$this.removeClass('develop-active');				$('#developLayer').fadeOut(100);			}		});		$(document).on('click','#developLayer',function(e){			if($(e.target).attr('id') == 'developLayer'){				$('#developMsg').removeClass('develop-active');				$('#developLayer').fadeOut(100);			}		});		$side.on('click','#openShrink',function(){			$side.toggleClass('ifSys-menu-shrink');			$ctBody.toggleClass('ct-open');		});		$('#ctLeft').scroll(function(){			var $iconOpenRight = $('#iconOpenRight');			if($iconOpenRight && $iconOpenRight.hasClass('active')){				$iconOpenRight.click();			}		});		$side.on('click','#iconSearchOpen',function(){			$('#interfaceList').css('top','140px');			$('#searchMenu').css('height','100px').find('#searchForm').removeClass('hide');		});		$('#helpTip').click(function(){			$('#detaiRight').toggleClass('detai-right-open');		});		$('#detailBox').on('click','#helpTip > .icon-font',function(){			$('#detailLeft').toggleClass('detail-left-open');		});		//产品信息展开二级菜单		$side.on('mouseenter','#sysSelect > .dropdown-menu > li',function(){			var $this = $(this), sysId = $this.find('a').attr('sysId'),				ul = '';			for(var i = 0, len = allSysInfo.proList.length; i < len; i++) {				if (sysId == allSysInfo.proList[i].sysId) {					ul += '<li><a href="javascript:;" sysId='+sysId+' proId='+allSysInfo.proList[i].id+'>'+allSysInfo.proList[i].proName+'</a></li>';				}			}			if(ul){				ul = '<ul class="dropdown-menu" role="menu">'+ul+'</ul>';				$this.append(ul);			}		}).on('mouseleave','#sysSelect > .dropdown-menu > li',function(){			$(this).find('.dropdown-menu').remove();		});		$ctBody.on('click','#iconOpenRight',function(){			var $this = $(this);			if(!$this.hasClass('active')){				$('#ctRight').css('right','0');			}else{				$('#ctRight').css('right','-30%');			}			$this.toggleClass('active');		});		$('#breadList > li').click(function(){			var $this = $(this),				index = $this.index();			if(index == 1){				$('#viewBox, #getIfsysFeedInterface').addClass('hide');				$('#editBox').removeClass('hide');			} else if (index == 0){				$('#editBox, #getIfsysFeedInterface').addClass('hide');				$('#viewBox').removeClass('hide');			} else if (index == 2){				$('#viewBox, #editBox').addClass('hide');				$('#getIfsysFeedInterface').removeClass('hide');			}			$this.addClass('active').siblings().removeClass('active');		});		$side.on('click','.case-detail',function(){			var val = $(this).attr('data-value').split(',');			var href = 'sysId='+val[0]+'&pageNum='+val[1]+'&interfaceId='+val[2]+'&caseId='+val[3];			window.open('http://'+window.location.host+'/autotest/new/main.html?'+href);			//window.open('http://'+window.location.host+'/work/webStatic/ifsys/pay-autotest/pay-autotest-web/webapp/main.html?'+strHref);		});		$side.on('click','.interface-details',function(){			var $this = $(this),				interfaceId = $this.find('.interface-detail > p > i').html().trim();			$this.addClass('interface-details-active').siblings().removeClass('interface-details-active');			$this.find('.case-details').toggleClass('hide').parents('.interface-details').siblings().find('.case-details').addClass('hide');			if(interfaceId){				if($('#detailBox')){					$('#detailBox').remove();					$('#ctLeft, #ctRight').removeClass('hide');				}				if(!$this.find('.case-details').hasClass('hide')){					$('#codeAdd').data('interfaceId',interfaceId);					//获取接口基本信息,请求参数,响应参数					ifSys.queryInterFaceById({data:{						interFaceInfo: {id: interfaceId+''},						requestTm: (new Date()).getTime()					}});					//获取表格数据					ifSys.sheetList({data:{						ifId: interfaceId,						size: '15'					}});					//获取接口的关注列表					ifSys.getinvokerlist({data:{						ifFollowedId: interfaceId+''					}});					//获取接口参数依赖关系列表					ifSys.getInterFaceFieldsJson({data:{						interFaceField: {							fieldFlag: "1",							ifId: interfaceId+""						},						requestTm: (new Date()).getTime()					}});					//获取接口响应参数模板					ifSys.getInterFaceFieldsJsonCopy({data:{						interFaceField: {							fieldFlag: "2",							ifId: interfaceId+""						},						requestTm: (new Date()).getTime()					}});					//获取接口参数依赖关系列表					ifSys.getIFFields({data:{						ifId: interfaceId+'',						fieldType: 1					}});					//获取历史返回码					ifSys.getHistoricalReturnCode({data:{						ifId: interfaceId+''					}});					//获取接口改动记录					ifSys.getInterfaceChanges({data:{						ifId: interfaceId+''					}});				}			} else {				layer.tips('缺少接口ID',$(this),{					tips: [2, '#25AEB3']				});			}		});		$side.on('click','#sysSelect .dropdown-menu li',function(e){			e.stopPropagation();			var $this = $(this),				sysid = $this.find('a').attr('sysid'),				proid = $this.find('a').attr('proId');			GiGoldPay.selectChoose($this,['sysid'],proid);			ifSys.queryByCondition({				data: {					ifName: "",					ifProId: proid ? proid - 0 : 0,					ifSysId: sysid - 0,					pageNum: 1,					queryByCondition: true				}			});			$('#sysSelect').removeClass('open');		});		$side.on('click','.pre, .next',function(){			var pageNum = $(this).attr('pageNum');			ifSys.queryByCondition({				data: {					ifName: $('#iconSearch').prev().val()+"",					ifProId: $('#proSelect').find('span').attr('proid') || 0,					ifSysId: $('#proSelect').find('span').attr('sysid') || 0,					pageNum: pageNum-0				}			});		});		$side.on('click','#iconSearch',function(){			ifSys.queryByCondition({				data: {					ifName: $(this).prev().val()+"",					ifProId: 0,					ifSysId: 0,					pageNum: 1				}			});		});		$(document).keydown(function(event){			if (event.which == 13) {				ifSys.queryByCondition({					data: {						ifName: $('#iconSearch').prev().val()+"",						ifProId: 0,						ifSysId: 0,						pageNum: 1					}				});			}		});		$ctBody.on('click','#codeAllBox > p',function(){			var $this = $(this);			$this.addClass('active').siblings('p').removeClass('active');			if($this.index() == 0){				$('#resCodeAllBox').find('div').eq(0).removeClass('hide').siblings('div').addClass('hide');			}else{				$('#resCodeAllBox').find('div').eq(1).removeClass('hide').siblings('div').addClass('hide');			}		});		$side.on('click','.case-detail',function(e){			e.stopPropagation();			return false;			/*var $this = $(this),			 caseId = $this.addClass('active').find('p > i').html().trim();			 if(caseId){			 $this.siblings('li').removeClass('active');			 $('#codeAdd').data('caseid',caseId);			 ifSys.getMockById({			 data: {			 id: caseId+''			 }			 });			 } else {			 layer.tips('未找到用例ID',$this,{			 tips: [2, '#25AEB3']			 });			 }*/		});		$side.on('click','#iconAdd',function(e){			var proid = $('#proSelect').find('span').attr('proid');			if ($('#proSelect').find('span').attr('sysid').trim() == 0){				layer.tips('请先选择系统!',$(this),{					tips: [2, '#25AEB3']				});			} else if(!proid){				layer.tips('此系统缺少产品!',$(this),{					tips: [2, '#25AEB3']				});			} else {				ifSys.fixLayerBox2({type:'interface-add',allSysInfo:allSysInfo});				$fixLayer.fadeIn(300);				ifSys.freeSearchTool = $("#invokersBox").searchBox(ifSys.freeSearch.data);			}			e.stopPropagation();		});		$side.on('click','.interface-edit',function(e){			var interfaceId = $(this).parent('.interface-op-box').siblings('p').find('i').html().trim();			ifSys.queryInterFaceById({data:{				interFaceInfo: {id: interfaceId+''},				requestTm: new Date(),				getMsg: true			},callback:function(invokers){                // 当前回调的目的是为了将闭包传入接口调用函数                ifSys.freeSearchTool = $("#invokersBox").searchBox(ifSys.freeSearch.data,invokers);            }});			e.stopPropagation();		});		$side.on('click','.interface-del',function(e){			var interfaceId = $(this).parent('.interface-op-box').siblings('p').find('i').html().trim();			if(interfaceId){				layer.confirm('确认删除接口: '+interfaceId+' ？', {					title: '删除提示',					btn: ['确认','取消']				}, function(){					ifSys.deleteInterFaceById({						data:{							interFaceInfo: {								id: interfaceId							}						},						that: $(this)					});				}, function(){					layer.msg('已取消删除接口');				});			} else {				layer.msg('缺少接口id');			}			e.stopPropagation();		});		//=========================分割线======================		//=========================分割线======================		//=========================分割线======================		$('#follow').click(function(){			if(!$(this).hasClass('folllow-active')){				layer.msg('待完善,敬请期待');				return false;				//ifSys.addinvoker({				//	data: {				//		ifFollowedId: '',				//		remark: ''				//	}				//});			}else{				layer.tips('你已关注',$(this),{					tips: [3, '#25AEB3']				});			}		});		$('#codeAdd').click(function(){			if($(this).data('interfaceId')){				$('#resCodeBody').append('<tr>' +					'<td><input type="text"></td>' +					'<td>' +					'<input type="text"></td>' +					'<td>' +					'<div class="code-op-box">' +					'<a class="del" href="javascript:;" title="删除" newCode="true">' +					'<i class="icon-font">&#xe606;</i>' +					'</a>' +					'</div>' +					'</td></tr>');			} else {				layer.tips('请先选择接口',$(this),{					tips: [3, '#25AEB3']				});			}		});		$ctBody.on('click','.code-op-box > .del',function(){			var $this = $(this),				codeId = $this.attr('codeId'),				ifId = $this.attr('ifId'),				rspCode = $this.parents('tr').find('td').eq(0).find('input').val(),				rspCodeDesc = $this.parents('tr').find('td').eq(1).find('input').val();			if($this.attr('newCode') == 'true'){				$this.parents('tr').remove();			} else {				if(codeId && ifId){					layer.confirm('确认删除接口返回码: '+codeId+' ？', {						title: '删除提示',						btn: ['确认','取消']					}, function(){						ifSys.delrspcdbyid({							data:{								id: codeId.trim()+'',								ifId: ifId.trim()+'',								rspCode: (rspCode ? rspCode.trim() : '') +'',								rspCodeDesc: (rspCodeDesc ? rspCode.trim() : '')+''							},							that:$this						});					}, function(){						layer.msg('已取消删除接口返回码');					});				} else {					layer.tips('缺少返回码ID or 接口Id',$(this),{						tips: [2, '#25AEB3']					});				}			}		});		$('#codeSave').click(function(){			var ifId = $('#codeAdd').data('interfaceId'),				$tr = $('#resCodeBody').find('tr'),				len = $tr.length;			if(!ifId){				layer.tips('缺少接口Id',$(this),{					tips: [4, '#25AEB3']				});				return false;			}			if(len == 0){				layer.tips('请先添加返回码',$(this),{					tips: [4, '#25AEB3']				});				return false;			}			//拼凑返回码数据			var rspCodeList = [];			for(var i = 0; i < len; i++){				var id = $($tr[i]).attr('codeId'),					rspCode = $($tr[i]).find('td > input').eq(0).val(),					rspCodeDesc = $($tr[i]).find('td > input').eq(1).val();				if(id){					if(rspCode && rspCodeDesc) rspCodeList.push({id: id-0,rspCode:rspCode.trim(),rspCodeDesc:rspCodeDesc.trim()});				} else {					if(rspCode && rspCodeDesc) rspCodeList.push({rspCode:rspCode.trim(),rspCodeDesc:rspCodeDesc.trim()});				}			}			if(rspCodeList.length != len || !rspCodeList.length){				layer.msg('存在为空数据,请检查返回码列表,并重试');				return false;			}			//去重			var tempArray = [];			for(var i = 0, len = rspCodeList.length; i < len; i++){				for(var j = 0, jLen= tempArray.length; j < jLen; j++){					var flag = false;					if(rspCodeList[i].rspCode == tempArray[j].rspCode){						flag = true;//已存在						break;					}				}				if(!flag){					tempArray.push(rspCodeList[i]);				}			}			ifSys.updateIFRspCode({				data: {					ifId: ifId,					rspCodeList: tempArray				}			});		});		$('#importCode,#reqImportJson,#resImportJson').click(function(){			if($('#codeAdd').data('interfaceId')){				var thisId = $(this).attr('id'),					type = '';				switch (thisId) {					case ('importCode'):						type = 'import-code';						break;					case ('reqImportJson'):						type = 'import-req-code';						break;					case ('resImportJson'):						type = 'import-res-code';						break;					default :						break;				}				ifSys.fixLayerBox1({type:type});				$fixLayer.fadeIn(300);			} else {				layer.tips('请先选择接口',$(this),{					tips: [2, '#25AEB3']				});			}		});		function getJsonData(data){			var $tr = $(data).find('tr'),				fieldsList = [];			for(var i = 0,len = $tr.length; i<len;i++){				fieldsList.push({					"id": $($tr[i]).attr('selfId') || '',					'parent': $($tr[i]).attr('parentName') || '',					'k': $($tr[i]).find('td').eq(1).children().val() || '',					'mock': $($tr[i]).find('td').eq(4).children().val() || '',					'type': $($tr[i]).find('.glyphicon').attr('type') || '',					'note': $($tr[i]).find('td').eq(2).children().val() || '',					'parentId': $($tr[i]).attr('parent') || ''				});			}			return fieldsList;		}		$('#reqSave').click(function(){			var data = getJsonData('#reqBody');			if($('#codeAdd').data('interfaceId')){				ifSys.updateIFFields({					data: {						'ifId': $('#codeAdd').data('interfaceId'),						'fieldType': '1',						'fieldsList': data					}				});			} else {				layer.tips('请先选择接口',$(this),{					tips: [2, '#25AEB3']				});			}		});		$('#resSave').click(function(){			var data = getJsonData('#resBody');			if($('#codeAdd').data('interfaceId')){				ifSys.updateIFFields({					data: {						'ifId': $('#codeAdd').data('interfaceId'),						'fieldType': '2',						'fieldsList': data					}				});			} else {				layer.tips('请先选择接口',$(this),{					tips: [2, '#25AEB3']				});			}		});		$ctBody.on('click','#reqTypeSelect > .dropdown-menu > li',function(e){			e.stopPropagation();			GiGoldPay.selectChoose($(this),['type']);		});		$ctBody.on('click','#resTypeSelect > .dropdown-menu > li',function(e){			e.stopPropagation();			GiGoldPay.selectChoose($(this),['type']);		});		function importSmAdd(that){			var $thisParent = that.parents('tr'),				selfK = $thisParent.attr('parentname'),				selfId  = $thisParent.attr('selfId'),				$siblings = $thisParent.nextAll();			if(selfK == 0){				selfK = $thisParent.find('td').eq(1).children().val();			}else{				selfK = selfK+'.'+$thisParent.find('td').eq(1).children().val();			}			that.toggleClass('hide').siblings('.sm-del').toggleClass('hide');			for(var i = 0, len = $siblings.length; i < len ;i++){				var temp  = $($siblings[i]).attr('parentname');				if(selfK == temp){					$($siblings[i]).removeClass('hide');				}			}		}		function importSmDel(that){			var $thisParent = that.parents('tr'),				selfK = $thisParent.attr('parentname'),				selfId  = $thisParent.attr('selfId'),				$siblings = $thisParent.nextAll();			if(selfK == 0){				selfK = $thisParent.find('td').eq(1).children().val();			}else{				selfK = selfK+'.'+$thisParent.find('td').eq(1).children().val();			}			that.toggleClass('hide').siblings('.sm-add').toggleClass('hide');			for(var i = 0, len = $siblings.length; i < len ;i++){				var temp  = $($siblings[i]).attr('parentname');				if(temp.indexOf(selfK) >= 0){					$($siblings[i]).addClass('hide');				}			}		}		function getSmAdd(that){			var $thisParent = that.parents('tr'),				selfId  = $thisParent.attr('selfId'),				$siblings = $thisParent.nextAll();			that.addClass('hide').siblings('.sm-del').removeClass('hide');			for(var i = 0, len = $siblings.length; i < len ;i++){				var parent = $($siblings[i]).attr('parent') ? $($siblings[i]).attr('parent').trim() : '',					temp = parent.split('.');				for(var j = 0, _len = temp.length; j < _len ;j++){					if(selfId == temp[j]){						$($siblings[i]).removeClass('hide').find('td').eq(1).addClass('class'+(j+1));						break;					}				}			}		}		function getSmDel(that){			var $thisParent = that.parents('tr'),				selfId  = $thisParent.attr('selfId'),				$siblings = $thisParent.nextAll();			that.addClass('hide').siblings('.sm-add').removeClass('hide');			for(var i = 0, len = $siblings.length; i < len ;i++){				var parent = $($siblings[i]).attr('parent') ? $($siblings[i]).attr('parent').trim() : '',					temp = parent.split('.');				for(var j = 0, _len = temp.length; j < _len ;j++){					if(selfId == temp[j]){						$($siblings[i]).addClass('hide');						break;					}				}			}		}		//展开子级		$ctBody.on('click','#resBody .sm-add',function(){			if($(this).parents('tr').attr('selfid')){				getSmAdd($(this));			}else{				importSmAdd($(this));			}		});		//缩进子级		$ctBody.on('click','#resBody .sm-del',function(){			if($(this).parents('tr').attr('selfid')){				getSmDel($(this));			}else{				importSmDel($(this));			}		});		//展开子级		$ctBody.on('click','#reqBody .sm-add',function(){			if($(this).parents('tr').attr('selfid')){				getSmAdd($(this));			}else{				importSmAdd($(this));			}		});		//缩进子级		$ctBody.on('click','#reqBody .sm-del',function(){			if($(this).parents('tr').attr('selfid')){				getSmDel($(this));			}else{				importSmDel($(this));			}		});		$ctBody.on('click','#resBody .del, #reqBody .del',function(){			var $thisParent = $(this).parents('tr'),				selfId  = $thisParent.attr('selfId'),				$siblings = $thisParent.nextAll();			layer.confirm('确认删除参数依赖?', {				title: '删除提示',				btn: ['确认','取消']			}, function(){				if(selfId){					ifSys.deleteFieldByLevel({						data: {							interFaceField: {								id: selfId+'',								siblings: $siblings,								thisParent: $thisParent							}						}					});					$('.layui-layer, .layui-layer-shade').remove();				} else {					$thisParent.remove();					layer.msg('缺少接口id');				}			}, function(){				layer.msg('已取消删除参数依赖');			});		});		function getRspDicListHtml(){			var html = '';			for(var i = 0, len = rspDicList.length;i<len;i++){				if(rspDicList[i].desc == '对象数组'){					html += '<li><a href="javascript:;" type='+rspDicList[i].id+'>array&lt;object&gt;</a></li>';				}else{					html += '<li><a href="javascript:;" type='+rspDicList[i].id+'>'+rspDicList[i].name+'</a></li>';				}			}			return html;		}		$ctBody.on('click','#resBody .add',function(){				var $thisParent = $(this).parents('tr'),					$parentVal = $thisParent.find('td').eq(1).children().val(),					selfId  = $thisParent.attr('selfId'),					className = $thisParent.find('td').eq(1).attr('class'),					newClassName = 'class'+((className.substr(5,className.length)-0)+1),					newParentName = $thisParent.attr('parentname') ? ($thisParent.attr('parentname')+'.'+$thisParent.find('td').eq(1).children().val()) : $thisParent.find('td').eq(1).children().val();			if($parentVal && $parentVal.trim()){				$thisParent.after('<tr parentName='+newParentName+'>' +					'<td>' +					'<div class="req-op-box">' +					'<a class="sm-del hide" href="javascript:;" title="收缩">' +					'<i class="icon-font">&#xe608;</i>' +					'</a>' +					'<a class="sm-add" href="javascript:;" title="展开">' +					'<i class="icon-font">&#xe607;</i>' +					'</a>' +					'<a class="del" href="javascript:;" title="删除">' +					'<i class="icon-font">&#xe606;</i>' +					'</a>' +					'<a class="add" href="javascript:;" title="添加">' +					'<i class="icon-font">&#xe604;</i>' +					'</a>' +					'</div>' +					'</td>' +					'<td class='+newClassName+'><input type="text"></td>' +					'<td class="blue"><input type="text"></td>' +					'<td id="resTypeSelect" class="btn-group" style="position: relative;">' +					'<button class="btn btn-default dropdown-toggle op-type" data-toggle="dropdown"' +					'type="button" aria-haspopup="true" aria-expanded="false">请选择类型' +					'<span class="glyphicon glyphicon-triangle-bottom" type="0"></span>' +					'</button>' +					'<ul class="dropdown-menu" role="1" style="top: 50px;">'+getRspDicListHtml()+					'</ul>' +					'</td>' +					'<td><input type="text"></td>' +					'</tr>');			} else{				layer.msg('请先填写父级的变量名');			}		});		$ctBody.on('click',' #reqBody .add',function(){			var $thisParent = $(this).parents('tr'),				$parentVal = $thisParent.find('td').eq(1).children().val(),				selfId  = $thisParent.attr('selfId'),				className = $thisParent.find('td').eq(1).attr('class'),				newClassName = 'class'+((className.substr(5,className.length)-0)+1),				newParentName = $thisParent.attr('parentname') ? ($thisParent.attr('parentname')+'.'+$thisParent.find('td').eq(1).children().val()) : $thisParent.find('td').eq(1).children().val();			if($parentVal && $parentVal.trim()){				$thisParent.after('<tr parentName='+newParentName+'>' +					'<td>' +					'<div class="req-op-box">' +					'<a class="sm-del hide" href="javascript:;" title="收缩">' +					'<i class="icon-font">&#xe608;</i>' +					'</a>' +					'<a class="sm-add" href="javascript:;" title="展开">' +					'<i class="icon-font">&#xe607;</i>' +					'</a>' +					'<a class="del" href="javascript:;" title="删除">' +					'<i class="icon-font">&#xe606;</i>' +					'</a>' +					'<a class="add" href="javascript:;" title="添加">' +					'<i class="icon-font">&#xe604;</i>' +					'</a>' +					'</div>' +					'</td>' +					'<td class='+newClassName+'><input type="text"></td>' +					'<td class="blue"><input type="text"></td>' +					'<td id="reqTypeSelect" class="btn-group" style="position: relative;">' +					'<button class="btn btn-default dropdown-toggle op-type" data-toggle="dropdown"' +					'type="button" aria-haspopup="true" aria-expanded="false">请选择类型' +					'<span class="glyphicon glyphicon-triangle-bottom" type="0"></span>' +					'</button>' +					'<ul class="dropdown-menu" role="menu" style="top: 50px;">' + getRspDicListHtml()+					'</ul>' +					'</td>' +					'<td><input type="text"></td>' +					'</tr>');			} else{				layer.msg('请先填写父级的变量名');			}		});		$ctBody.on('click','#reqAdd, #resAdd',function(){			if($('#codeAdd').data('interfaceId')){				var cla = 'class0',					$dom = null;				if($(this).attr('id') == 'reqAdd'){					$dom = $('#reqBody');					if($('#reqBody:last-child')) {						cla = $('#reqBody:last-child').find('td').eq(1).attr('class') || 'class0';					}				}				if($(this).attr('id') == 'resAdd'){					$dom = $('#resBody');					if($('#reqBody:last-child')) {						cla = $('#reqBody:last-child').find('td').eq(1).attr('class') || 'class0';					}				}				$dom.append('<tr>' +					'<td>' +					'<div class="req-op-box">' +					'<a class="sm-del hide" href="javascript:;" title="收缩">' +					'<i class="icon-font">&#xe608;</i>' +					'</a>' +					'<a class="sm-add" href="javascript:;" title="展开">' +					'<i class="icon-font">&#xe607;</i>' +					'</a>' +					'<a class="del" href="javascript:;" title="删除">' +					'<i class="icon-font">&#xe606;</i>' +					'</a>' +					'<a class="add" href="javascript:;" title="添加">' +					'<i class="icon-font">&#xe604;</i>' +					'</a>' +					'</div>' +					'</td>' +					'<td class='+cla+'><input type="text"></td>' +					'<td class="blue"><input type="text"></td>' +					'<td id="reqTypeSelect" class="btn-group" style="position: relative;">' +					'<button class="btn btn-default dropdown-toggle op-type" data-toggle="dropdown"' +					'type="button" aria-haspopup="true" aria-expanded="false">请选择类型' +					'<span class="glyphicon glyphicon-triangle-bottom" type="0"></span>' +					'</button>' +					'<ul class="dropdown-menu" role="menu" style="top: 50px;">' +getRspDicListHtml()+					'</ul>' +					'</td>' +					'<td><input type="text"></td>' +					'</tr>');			} else {				layer.tips('请先选择接口',$(this),{					tips: [2, '#25AEB3']				});			}		});		//浮层-新增编辑产品信息展开二级菜单		$fixLayer.on('mouseenter','#proSelectFixBox > .dropdown-menu > li',function(){			var $this = $(this), sysId = $this.find('a').attr('sysId'),				ul = '';			for(var i = 0, len = allSysInfo.proList.length; i < len; i++) {				if (sysId == allSysInfo.proList[i].sysId) {					ul += '<li><a href="javascript:;" sysId='+sysId+' proId='+allSysInfo.proList[i].id+'>'+allSysInfo.proList[i].proName+'</a></li>';				}			}			if(ul){				ul = '<ul class="dropdown-menu" role="menu">'+ul+'</ul>';				$this.append(ul);			}		}).on('mouseleave','#proSelectFixBox > .dropdown-menu > li',function(){			$(this).find('.dropdown-menu').remove();		});		var updateProNameLayer = function(sysId,proId){			var sysPro = {				sysId: sysId,				proId: proId			};			if(allSysInfo && allSysInfo.v){//proList				if(proId){					for(var i = 0, len = allSysInfo.proList.length; i < len; i++){						if(allSysInfo.proList[i].id == proId){							sysPro.proName= allSysInfo.proList[i].proName;							break;						}					}				}				if(sysId){					for(var i = 0, len = allSysInfo.sysList.length; i < len; i++){						if(allSysInfo.sysList[i].id == sysId){							sysPro.sysName= allSysInfo.sysList[i].sysName;							break;						}					}				}			}			if(sysPro.sysName && sysPro.proName){				$('#proSelectFix').html(sysPro.proName+'&nbsp;<span class="glyphicon glyphicon-triangle-bottom" sysid='+sysPro.sysId+' proid='+sysPro.proId+'></span>');				$('#sysProTipLayer').html(sysPro.sysName+'&nbsp;->&nbsp;'+sysPro.proName);			}else{				$('#proSelectFix').html(sysPro.sysName+'&nbsp;<span class="glyphicon glyphicon-triangle-bottom" sysid='+sysPro.sysId+'></span>');				$('#sysProTipLayer').html(sysPro.sysName);			}		};		//浮层-新增编辑产品信息展开二级菜单选择		$fixLayer.on('click','#proSelectFixBox .dropdown-menu li',function(e){			e.stopPropagation();			var $this = $(this),				sysid = $this.find('a').attr('sysid'),				proid = $this.find('a').attr('proId');			updateProNameLayer(sysid,proid);			$('#proSelectFixBox').removeClass('open');		});		$fixLayer.on('click','#closeBox, .cancel',function(){			$fixLayer.empty().fadeOut(300);		});		$fixLayer.on('click','.radio-list > li',function(){			$(this).addClass('active').siblings('li').removeClass('active');		});		function importJson(obj){			var index = 0;			var objArray = [];			var boom = function(obj,str,index){				for(var k in obj){					var _index = index;					if(_index < 10){						_index += 1;						if(typeof (obj[k]) == 'object' && (obj[k]) !== null){							if(obj[k] instanceof Array){//数组								var temp = obj[k];								for(var i = 0, len = temp.length; i< len; i++){									if(typeof (temp[0]) == 'object' && (obj[k]) !== null){										//array<object>										var _str = '';										for(var key in temp[0]){											_str = key;											break;										}										objArray.push({											'id': "",											'parent': str+'',											'k': k,											'type': 'array<object>',											'mock': _str,											'note': ""										});										for(var key in temp[0]){											_str = key;											objArray.push({												'id': "",												'parent': str+k+'.',												'k': key,												'type': typeof (temp[0][key])+'',												'mock': temp[0][key],												'note': ""											});										}										break;									} else {										//array										objArray.push({											'id': "",											'parent': str+'',											'k': k,											'type': 'array',											'mock': obj[k],											'note': ""										});										break;									}								}							} else { //对象								var _str = '';								for(var key in obj[0]){									_str = key;									break;								}								objArray.push({									'id': "",									'parent': str+'',									'k': k,									'type': 'object',									'mock': _str,									'note': ""								});								if(k == 0){									boom(obj[k],str,_index);								} else {									boom(obj[k],str+k+'.',_index);								}							}						} else {							//number,string,null,boolean 不进行遍历处理							if(obj[k] === null){								objArray.push({									'id': "",									'parent': str+'',									'k': k,									'type': 'null',									'mock': obj[k],									'note': ""								});							} else if(typeof (obj[k]) == 'string'){								objArray.push({									'id': "",									'parent': str+'',									'k': k,									'type': typeof (obj[k])+'',									'mock': '&quot;'+obj[k]+'&quot;',									'note': ""								});							} else {								objArray.push({									'id': "",									'parent': str+'',									'k': k,									'type': typeof (obj[k])+'',									'mock': obj[k],									'note': ""								});							}						}					} else {						layer.msg('嵌套层级超过10层');						break;					}				}			};			boom(obj,'',index);			for(var i = 0,len = objArray.length; i< len; i++){				if(objArray[i].parent.indexOf('.') >= 0){					objArray[i].parent = objArray[i].parent.substr(0,objArray[i].parent.length-1);				} else {					objArray[i].parent = '';				}			}			return objArray;		}		$fixLayer.on('click','.confirm',function(){			var type = $('#closeBox').attr('type'),				data = {};			switch (type){				case ('interface-add'):					//新增接口					data.ifName = $('#ifName').val().trim();					data.ifUrl = $('#ifUrl').val().trim();					data.ifType = $('#ifType').find('.active').attr('data-type').trim();					data.ifDesc = $('#ifDesc').val().trim();					data.returnType = $('#ifFormat').find('.active').attr('data-type').trim();					data.ifSysId = $('#proSelectFix').find('span').attr('sysid').trim();					data.ifProId = $('#proSelectFix').find('span').attr('proid') ? $('#proSelectFix').find('span').attr('proid').trim() : '';					data.ifProtocol = $('#ifProtocol').find('.active').attr('data-type').trim();					data.isIdempotent = $('#ifMiDeng').find('.active').attr('data-type').trim();					if(data.ifName && data.ifUrl && data.ifType && data.returnType){					console.log(ifSys.freeSearchTool.getAllSelections());						ifSys.addInterface({data: {							interFaceInfo: data,							invokerList:ifSys.freeSearchTool.getAllSelections()						}});						console.log(ifSys.freeSearchTool.getAllSelections())					} else {						layer.tips('缺少新增接口必要信息',$(this),							{								tips: [2, '#25AEB3']							});					}					break;				case ('interface-edit'):					//编辑接口					data.id = $('#closeBox').attr('interfaceid').trim();					data.ifName = $('#ifName').val().trim();					data.ifUrl = $('#ifUrl').val().trim();					data.ifType = $('#ifType').find('.active').attr('data-type').trim();					data.ifDesc = $('#ifDesc').val().trim();					data.returnType = $('#ifFormat').find('.active').attr('data-type') ? $('#ifFormat').find('.active').attr('data-type').trim() : '';					data.ifProtocol = $('#ifProtocol').find('.active').attr('data-type').trim();					data.isIdempotent = $('#ifMiDeng').find('.active').attr('data-type').trim();					data.ifSysId = $('#proSelectFix').find('span').attr('sysid').trim();					data.ifProId = $('#proSelectFix').find('span').attr('proid') ? $('#proSelectFix').find('span').attr('proid').trim() : '';					if(data.id && data.ifName && data.ifUrl && data.ifType && data.returnType){						ifSys.updateInterFace({data: {							interFaceInfo: data,							invokerList:ifSys.freeSearchTool.getAllSelections()						}});					} else {						layer.tips('缺少修改接口必要信息',$(this),{							tips: [4, '#25AEB3']						});					}					break;				case ('import-code'):					try{						var codeJsonStr = $('#codeJson').val() ? $('#codeJson').val().trim() : '';						var codeJsonArry = codeJsonStr.split(/,|;/);						var validData = [],							html = '';						//新增数据						for(var i= 0, len = codeJsonArry.length; i< len; i++){							var temp  =  codeJsonArry[i].split(':');							if(temp[0].match(/^[A-Za-z0-9]+$/g) && temp[1].match(/^((?!;).)*$/g)){								validData.push({"rspCode":temp[0], "rspCodeDesc": temp[1]});							}						}						//已有数据						var $tr = $('#resCodeBody').find('tr'),							rspCodeList = [];//拼凑返回码数据						for(var i = 0; i < len; i++){							var id = $($tr[i]).attr('codeId'),								rspCode = $($tr[i]).find('td > input').eq(0).val(),								rspCodeDesc = $($tr[i]).find('td > input').eq(1).val();							if(id){								if(rspCode && rspCodeDesc) rspCodeList.push({id: id-0,rspCode:rspCode.trim(),rspCodeDesc:rspCodeDesc.trim()});							} else {								if(rspCode && rspCodeDesc) rspCodeList.push({rspCode:rspCode.trim(),rspCodeDesc:rspCodeDesc.trim()});							}						}						//数据合并						var rspCodeList =  rspCodeList.concat(validData);						//数据去重						var tempArray = [];						for(var i = 0, len = rspCodeList.length; i < len; i++){							for(var j = 0, jLen= tempArray.length; j < jLen; j++){								var flag = false;								if(rspCodeList[i].rspCode == tempArray[j].rspCode){									flag = true;//已存在									break;								}							}							if(!flag){								tempArray.push(rspCodeList[i]);							}						}						//tr拼接						for(var i = 0, len = tempArray.length; i < len; i++){							var trHead = '<tr>';							if(tempArray[i].id){								trHead = '<tr codeid='+tempArray[i].id+'>';							}							html += trHead+								'<td class="green"><input type="text" value='+tempArray[i].rspCode+'></td>'+								'<td><input type="text" value='+tempArray[i].rspCodeDesc+'></td>'+								'<td>'+								'<div class="code-op-box">'+								'<a class="del" href="javascript:;" title="删除" newCode="true"><i class="icon-font">&#xe606;</i></a>'+								'</div>'+								'</td>'+								'</tr>';						}						if(html){							$('#resCodeBody').html(html);							$fixLayer.empty().fadeOut(300);							layer.msg('导入返回码成功');						}else{							layer.msg('导入内容为空');						}					}catch (e){						layer.msg('导入返回码格式不合法');					}					break;				case ('import-req-code'):					try{						var codeJsonStr = $('#codeJson').val() ? $('#codeJson').val().trim() : '';						var obj = JSON.parse(codeJsonStr);						var arry = importJson(obj);						var html = '';						for(var i = 0, len = arry.length; i < len; i++){							var newClassName= !arry[i].parent? 'class0' : 'class'+arry[i].parent.split('.').length,								title = '', index = 0;							switch (arry[i].type){								case ('string'):									title = 'string';index = 1;									break;								case ('number'):									title = 'number';index = 2;									break;								case ('array<object>'):									title = 'array&lt;object&gt;';index = 3;									break;								case ('object'):									title = 'object';index = 4;									break;								case ('boolean'):									title = 'boolean';index = 5;									break;								case ('null'):									title = 'null';index = 6;									break;								case ('array'):									title = 'array';index = 7;									break;								default:									title = '请选择类型';index = 0;									break;							}							html += '<tr parentName='+arry[i].parent+'>' +								'<td>' +								'<div class="req-op-box">' +								'<a class="sm-del" href="javascript:;" title="收缩">' +								'<i class="icon-font">&#xe608;</i>' +								'</a>' +								'<a class="sm-add hide" href="javascript:;" title="展开">' +								'<i class="icon-font">&#xe607;</i>' +								'</a>' +								'<a class="del" href="javascript:;" title="删除">' +								'<i class="icon-font">&#xe606;</i>' +								'</a>' +								'<a class="add" href="javascript:;" title="添加">' +								'<i class="icon-font">&#xe604;</i>' +								'</a>' +								'</div>' +								'</td>' +								'<td class='+newClassName+'><input type="text" value='+arry[i].k+'></td>' +								'<td><input type="text" value='+arry[i].note+'></td>' +								'<td id="reqTypeSelect" class="btn-group" style="position: relative;">' +								'<button class="btn btn-default dropdown-toggle op-type w114" data-toggle="dropdown"' +								'type="button" aria-haspopup="true" aria-expanded="false">'+title+'' +								'<span class="glyphicon glyphicon-triangle-bottom" type='+index+'></span>' +								'</button>' +								'<ul class="dropdown-menu" role="menu" style="top: 50px;">'+getRspDicListHtml()+								'</ul>' +								'</td>' +								'<td class="blue"><input type="text" value='+arry[i].mock+'></td>' +								'</tr>';						}						$('#reqBody').append(html);						$fixLayer.empty().fadeOut(300);					}catch (e){						layer.msg('导入请求Json格式不合法');					}					break;				case ('import-res-code'):					try{					var codeJsonStr = $('#codeJson').val() ? $('#codeJson').val().trim() : '';					var obj = JSON.parse(codeJsonStr);					var arry = importJson(obj);					var html = '';					for(var i = 0, len = arry.length; i < len; i++){						var newClassName= !arry[i].parent? 'class0' : 'class'+arry[i].parent.split('.').length,							title = '', index = 0;						switch (arry[i].type){							case ('string'):								title = 'string';index = 1;								break;							case ('number'):								title = 'number';index = 2;								break;							case ('array<object>'):								title = 'array&lt;object&gt;';index = 3;								break;							case ('object'):								title = 'object';index = 4;								break;							case ('boolean'):								title = 'boolean';index = 5;								break;							case ('null'):								title = 'null';index = 6;								break;							case ('array'):								title = 'array';index = 7;								break;							default:								title = '请选择类型';index = 0;								break;						}						html += '<tr parentName='+arry[i].parent+'>' +							'<td>' +							'<div class="req-op-box">' +							'<a class="sm-del" href="javascript:;" title="收缩">' +							'<i class="icon-font">&#xe608;</i>' +							'</a>' +							'<a class="sm-add hide" href="javascript:;" title="展开">' +							'<i class="icon-font">&#xe607;</i>' +							'</a>' +							'<a class="del" href="javascript:;" title="删除">' +							'<i class="icon-font">&#xe606;</i>' +							'</a>' +							'<a class="add" href="javascript:;" title="添加">' +							'<i class="icon-font">&#xe604;</i>' +							'</a>' +							'</div>' +							'</td>' +							'<td class='+newClassName+'><input type="text" value='+arry[i].k+'></td>' +							'<td><input type="text" value='+arry[i].note+'></td>' +							'<td id="resTypeSelect" class="btn-group" style="position: relative;">' +							'<button class="btn btn-default dropdown-toggle op-type w114" data-toggle="dropdown"' +							'type="button" aria-haspopup="true" aria-expanded="false">'+title+'' +							'<span class="glyphicon glyphicon-triangle-bottom" type='+index+'></span>' +							'</button>' +							'<ul class="dropdown-menu" role="menu" style="top: 50px;">'+getRspDicListHtml()+							'</ul>' +							'</td>' +							'<td class="blue"><input type="text" value='+arry[i].mock+'></td>' +							'</tr>';					}						$('#resBody').append(html);						$fixLayer.empty().fadeOut(300);					}catch (e){						console.log(e);						layer.msg('导如响应Json格式不合法');					}					break;				default:					$fixLayer.empty().fadeOut(300);					break;			}		});	})();	Array.prototype.insert = function (index, item) {		this.splice(index, 0, item);	};	function colorFullStart(){		function colorFull(regx){			if(!regx) throw "正则表达式不能为空";			var args = arguments;			Array.prototype.some.call(document.getElementsByClassName("feed-title"),function(it,id,ar){				var itText = it.innerHTML;				var group = itText.match(regx);				if(!group || group.length<=0) return;				if(group.length != args.length){					throw "参数数量不对,匹配到 "+group.length+" 个颜色,实际填了 "+(args.length-1)+" 个样式";				}				var matchedStr = group[0];				try{					for(var i = 0;i<args.length;i++){						var tar = group[i+1];						var color = args[i+1];						if(color){							matchedStr = matchedStr.replace(tar,"<i style='color:"+color+"'>"+tar+"</i>");						}					}					itText = itText.replace(group[0],matchedStr);					it.innerHTML = itText;				}catch(e){}			})		}		colorFull(/返回码:"([A-Z\d]*)"\[(.*)]/,"#70b600","#25aeb3");		colorFull(/<span>\[.*\]<\/span>的&nbsp;  <bold>(.*)<\/bold> 为 '(.*)'  /,"#25aeb3","#5cb85c");		colorFull(/&lt;(返回|请求)&gt;参数:?([.\s:\w"]*.*)\s,等(\s\d*\s)项参数修改/,null,"#25aeb3","#70b600");		colorFull(/(请求|返回)参数\s"(.*)"\s的(.*)\s为\s'(.*)'/,null,"#f90","#25aeb3","#70b600");	}	//MODEL	function MV(){}	MV.prototype.getIfsysFeed = function(obj){		if(!getIfsysFeedLock){			getIfsysFeedLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"getIfsysFeed.do",				"data": obj.data,				"onSuccess":function(data){					if (data.rspCd == "00000") {						getIfsysFeedLock = false;						ifSys.getIfsysFeedRender(data);					}else{						setTimeout(function(){							getIfsysFeedLock = false;						},waitTime);					}				},				'onError': function(data){					setTimeout(function(){						getIfsysFeedLock = false;					},waitTime);				}			});		}	};	MV.prototype.getInterfaceChanges = function(obj){		if(!getIfsysFeedLock){			getInterfaceChangesLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"getInterfaceChanges.do",				"data": obj.data,				"onSuccess":function(data){					if (data.rspCd == "00000") {						getInterfaceChangesLock = false;						ifSys.getInterfaceChangesRender(data);					}else{						setTimeout(function(){							getInterfaceChangesLock = false;						},waitTime);					}				},				'onError': function(data){					setTimeout(function(){						getInterfaceChangesLock = false;					},waitTime);				}			});		}	};	//更新缓存信息	var updateAllSysInfo = function(data,type){		if(type == 'init'){			data.cacheSysId = GiGoldTool.cookie('sysid');			data.cacheProId = GiGoldTool.cookie('proid');		}		var temp = data.sysList;		for(var i =0, len = temp.length; i<len; i++){			if(temp[i].id == data.cacheSysId){				data.cacheSysName = temp[i].sysName;				break;			}		}		var _temp = data.proList;		for(var i =0, len = _temp.length; i<len; i++){			if(_temp[i].id == data.cacheProId){				data.cacheProName = _temp[i].proName;				break;			}		}		allSysInfo = data;//系统产品信息缓存	};	MV.prototype.getAllSysInfo = function(obj){		if(!getAllSysInfoLock){			getAllSysInfoLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"getAllSysInfo.do",				"data": obj.data,				"onSuccess":function(data){					if (data.rspCd == "00000") {						getAllSysInfoLock = false;						updateAllSysInfo(data,'init');						ifSys.sysListRender(data);					}else{						setTimeout(function(){							getAllSysInfoLock = false;						},waitTime);					}				},				'onError': function(data){					setTimeout(function(){						getAllSysInfoLock = false;					},waitTime);				}			});		}	};	var updateProName = function(sysId,proId,pageNum){		//记cookie,下次访问,时期一年		GiGoldTool.cookie('sysid',sysId,{expires:365});		GiGoldTool.cookie('proid',proId,{expires:365});		GiGoldTool.cookie('pagenum',pageNum, {expires:365});		var sysPro = {			sysId: sysId,			proId: proId		};		if(allSysInfo && allSysInfo.v){//proList			if(proId){				for(var i = 0, len = allSysInfo.proList.length; i < len; i++){					if(allSysInfo.proList[i].id == proId){						sysPro.proName= allSysInfo.proList[i].proName;						break;					}				}			}			if(sysId){				for(var i = 0, len = allSysInfo.sysList.length; i < len; i++){					if(allSysInfo.sysList[i].id == sysId){						sysPro.sysName= allSysInfo.sysList[i].sysName;						break;					}				}			}		}		if(sysPro.sysName && sysPro.proName){			$('#proSelect').html(sysPro.proName+'&nbsp;<span class="glyphicon glyphicon-triangle-bottom" sysid='+sysPro.sysId+' proid='+sysPro.proId+'></span>');			$('#sysProTip').html(sysPro.sysName+'&nbsp;->&nbsp;'+sysPro.proName);		}else{			$('#proSelect').html(sysPro.sysName+'&nbsp;<span class="glyphicon glyphicon-triangle-bottom" sysid='+sysPro.sysId+'></span>');			$('#sysProTip').html(sysPro.sysName);		}	};	MV.prototype.queryByCondition = function(obj){		if(!queryByConditionLock){			//清楚缓存接口ID			$('#codeAdd').removeData('interfaceId');			queryByConditionLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"getallifsys.do",				"data": obj.data,				"onSuccess":function(data){					if (data.rspCd == "00000") {						queryByConditionLock = false;						updateProName(obj.data.ifSysId,obj.data.ifProId,obj.data.pageNum);						//回填 产品id						if(obj.data.ifSysId || GiGoldTool.cookie('sysid')){							ifSys.getProInfoBySysId({								data: {									interFacePro: {										sysId: (obj.data.ifSysId || GiGoldTool.cookie('sysid')) + '',										proId: (obj.data.ifProId || GiGoldTool.cookie('proid')) + ''									}								}							});						}						//缓存接口列表信息						cacheData = data.pageInfo;						data.pageInfo.cookieSysId = GiGoldTool.cookie('sysid');						data.pageInfo.cookieProId = GiGoldTool.cookie('proid');						data.pageInfo.cookiePageNum = GiGoldTool.cookie('pagenum');						ifSys.interfaceListRender(data.pageInfo);						ifSys.pagesRender(data.pageInfo);					}else{						layer.msg(data.rspInf);						setTimeout(function(){							queryByConditionLock = false;						},waitTime);					}				},				'onError': function(data){					setTimeout(function(){						queryByConditionLock = false;					},waitTime);				}			});		}	};	MV.prototype.getProInfoBySysId = function(obj){		if(!getProInfoBySysIdLock){			getProInfoBySysIdLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"getProInfoBySysId.do",				"data": obj.data,				"onSuccess":function(data){					if (data.rspCd == "00000") {						getProInfoBySysIdLock = false;						var $proSelect = $('#proSelect');						console.log(allSysInfo);						if(!$proSelect.find('span').length){							$proSelect.html(data.proList[0].proName+'&nbsp;<span class="glyphicon glyphicon-triangle-bottom" sysid='+obj.data.interFacePro.sysId+' proid='+obj.data.interFacePro.proId+'></span>')						}else{							if(obj.data.interFacePro){								$proSelect.find('span').attr('proid',obj.data.interFacePro.proId || '');							}else{								$proSelect.find('span').attr('proid',data.proList[0].id+'');							}						}					}else{						layer.msg(data.rspInf);						setTimeout(function(){							getProInfoBySysIdLock = false;						},waitTime);					}				},				'onError': function(data){					layer.msg('获取产品列表异常');					setTimeout(function(){						getProInfoBySysIdLock = false;					},waitTime);				}			});		}	};	MV.prototype.deleteFieldByLevel = function(obj){		if(!deleteFieldByLevelLock){			deleteFieldByLevelLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"deleteFieldByLevel.do",				"data": {					interFaceField: obj.data.interFaceField				},				"onSuccess":function(data){					if (data.rspCd == "00000") {						deleteFieldByLevelLock = false;						for(var i = 0, len = obj.data.interFaceField.siblings.length; i < len ;i++) {							var parent = $(obj.data.interFaceField.siblings[i]).attr('parent');							parent = parent ? parent.trim() : '';							if(parent.indexOf(obj.data.interFaceField.id) >= 0 ){								$(obj.data.interFaceField.siblings[i]).remove();							}						}						obj.data.interFaceField.thisParent.remove();					}else{						layer.msg(data.rspInf);						setTimeout(function(){							deleteFieldByLevelLock = false;						},waitTime);					}				},				'onError': function(data){					layer.msg('获取请求相应参数异常');					setTimeout(function(){						deleteFieldByLevelLock = false;					},waitTime);				}			});		}	};	MV.prototype.queryInterFaceById = function(obj){		if(!queryInterFaceByIdLock){			queryInterFaceByIdLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"queryInterFaceById.do",				"data": obj.data,				"onSuccess":function(data){					if (data.rspCd == "00000") {						queryInterFaceByIdLock = false;						if(obj.data.getMsg){							ifSys.fixLayerBox2({interfaceId:obj.data.interFaceInfo.id,type:'interface-edit',msg:data.interFaceInfo,allSysInfo:allSysInfo});							$fixLayer.fadeIn(300);						}else{							data.interFaceInfo.system = data.system;							data.interFaceInfo.pro = data.pro;							ifSys.detailInfoBoxRender(data.interFaceInfo);							ifSys.iterfaceDescRender(data.interFaceInfo);						}                        var invokers = []                        if(data.invokers){                            data.invokers.some(function(it){                                invokers.push(it["uId"])                            })                        }                        // 响应回调函数(构建多选控件,并设置初值)                        if(obj.callback)obj.callback(invokers);					} else {						layer.msg(data.rspInf);						$('#detailInfo').empty();						$('#iterfaceDesc').empty();						setTimeout(function(){							queryInterFaceByIdLock = false;						},waitTime);					}				},				'onError': function(data){					layer.msg('获取接口基本信息异常');					$('#detailInfo').empty();					$('#iterfaceDesc').empty();					setTimeout(function(){						queryInterFaceByIdLock = false;					},waitTime);				}			});		}	};	MV.prototype.getinvokerlist = function(obj){		if(!getinvokerlistLock){			getinvokerlistLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"getinvokerlist.do",				"data": obj.data,				"onSuccess":function(data){					if(data.rspCd == "00000") {						getinvokerlistLock = false;						ifSys.getinvokerlistRender(data);					}else{						layer.msg(data.rspInf);						$('#getinvokerlist').empty();						setTimeout(function(){							getinvokerlistLock = false;						},waitTime);					}				},				'onError': function(data){					layer.msg('获取关注列表异常');					$('#getinvokerlist').empty();					setTimeout(function(){						getinvokerlistLock = false;					},waitTime);				}			});		}	};	MV.prototype.getInterFaceFieldsJson = function(obj){		if(!getInterFaceFieldsJsonLock){			getInterFaceFieldsJsonLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"getInterFaceFieldsJson.do",				"data": obj.data,				"onSuccess":function(data){					if(data.rspCd == "00000") {						getInterFaceFieldsJsonLock = false;						if(obj.data.interFaceField.fieldFlag == 1){							ifSys.getInterFaceFieldsJson1(data);						}						if(obj.data.interFaceField.fieldFlag == 2){							ifSys.getInterFaceFieldsJson2(data);						}					}else{						layer.msg(data.rspInf);						setTimeout(function(){							getInterFaceFieldsJsonLock = false;						},waitTime);					}				},				'onError': function(data){					layer.msg('获取参数模板异常');					setTimeout(function(){						getInterFaceFieldsJsonLock = false;					},waitTime);				}			});		}	};	MV.prototype.getInterFaceFieldsJsonCopy = function(obj){		if(!getInterFaceFieldsJsonLock2){			getInterFaceFieldsJsonLock2 = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"getInterFaceFieldsJson.do",				"data": obj.data,				"onSuccess":function(data){					if(data.rspCd == "00000") {						getInterFaceFieldsJsonLock2 = false;						if(obj.data.interFaceField.fieldFlag == 1){							ifSys.getInterFaceFieldsJson1(data);						}						if(obj.data.interFaceField.fieldFlag == 2){							ifSys.getInterFaceFieldsJson2(data);						}					}else{						layer.msg(data.rspInf);						setTimeout(function(){							getInterFaceFieldsJsonLock2 = false;						},waitTime);					}				},				'onError': function(data){					layer.msg('获取参数模板异常');					setTimeout(function(){						getInterFaceFieldsJsonLock2 = false;					},waitTime);				}			});		}	};    //FreeSearch.js插件    MV.prototype.freeSearch = function(obj){        GiGoldPay.ajaxHandler({            "url": obj.url || GiGoldPay.ipBullShit()+"getAvlUserList.do",            "data": obj.data,            "type":"post",            "onSuccess":function(data){                if (data.rspCd == "00000") {                     // 1.获取格式化对象                    ifSys.freeSearch.data = data.userInfos;                }else{                    alert("返回码:"+data.rspCd);                }            },            'onError': function(data){               alert("加载用户列表失败");            }        });    }	function feildInitorParent(obj){		// id 节点对照表		var map = {};		// id parent 对照表		var idParent = {};		// 初始化对照表		obj.some(function(it){			map[it.id] = it;			idParent[it.id] = getParentKey(it.parent);		});		// k取值方法		function getParentKey(parentid){			var parentKey,				parentItem = map[parentid];			if(!parentItem){				parentKey="";			}else {				parentKey = parentItem.k;				if (parentItem.parent != "0" && parentItem.parent != "" && map[parentItem.parent]) {					parentKey = getParentKey(parentItem.parent) + "." + parentKey;				}			}			return parentKey;		}		// 执行替换		obj.some(function(it){			it.parent = idParent[it.id];		});		return obj;	}	function feildInitor(obj){		// id 节点对照表		var map = {};		// id parent 对照表		var idParent = {};		// 初始化对照表		obj.some(function(it){			map[it.id] = it;			idParent[it.id] = getParentKey(it.parent);		});		// k取值方法		function getParentKey(parentid){			var parentKey,				parentItem = map[parentid];			if(!parentItem){				parentKey="";			}else {				parentKey = parentItem.id;				if (parentItem.parent != "0" && parentItem.parent != "" && map[parentItem.parent]) {					parentKey = getParentKey(parentItem.parent) + "." + parentKey;				}			}			return parentKey;		}		// 执行替换		obj.some(function(it){			it.parent = idParent[it.id];		});		for(var i = 0, len = obj.length; i < len; i++){			if(obj[i].parent){				var temp = obj[i].parent +'';				obj[i].indexOrder = 'class'+temp.split('.').length;			}else{				obj[i].indexOrder = 'class0';			}		}		return obj;	}	Array.prototype.insert = function (index, item) {		this.splice(index, 0, item);	};	MV.prototype.getIFFields = function(obj){		if(!getIFFieldsLock){			getIFFieldsLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"getIFFields.do",				"data": obj.data,				"onSuccess":function(data){					if (data.rspCd == "00000") {						getIFFieldsLock = false;						rspDicList = data.rspDicList;						shutdata = data;//缓存请求参数,相应参数依赖关系						var _obj = GiGoldTool.deepCopyObj(shutdata.fieldsList),							array = [];						for(var key in _obj){							if(typeof (_obj[key]) == 'object'){								array.push(_obj[key]);							}						}						var _data = feildInitor(shutdata.fieldsList);						var parentName = feildInitorParent(array);						for(var i = 0, len = _data.length; i < len; i++){							for(var j= 0, _len = parentName.length; j< _len; j++){								if(_data[i].id == parentName[j].id){									_data[i].parentName = parentName[j].parent;									break;								}							}						}						data.fieldsList= _data;						ifSys.reqBodyRender(data);						ifSys.resBodyReder(data);						ifSys.codeRender(data);					}else{						layer.msg(data.rspInf);						$('#resCodeBody').empty();						$('#resBody').empty();						$('#reqBody').empty();						setTimeout(function(){							getIFFieldsLock = false;						},waitTime);					}				},				'onError': function(data){					layer.msg('获取参数依赖关系异常');					$('#resCodeBody').empty();					$('#resBody').empty();					$('#reqBody').empty();					setTimeout(function(){						getIFFieldsLock = false;					},waitTime);				}			});		}	};	MV.prototype.updateIFRspCode = function(obj){		if(!updateIFRspCodeLock){			updateIFRspCodeLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"updateIFRspCode.do",				"data": obj.data,				"onSuccess":function(data){					if (data.rspCd == "00000") {						updateIFRspCodeLock = false;						layer.msg('批量导入返回码成功');						$('#interfaceDetails').find('.interface-details-active > .case-details').addClass('hide').parent('.interface-details').click();					}else{						layer.msg(data.rspInf);						setTimeout(function(){							updateIFRspCodeLock = false;						},waitTime);					}				},				'onError': function(data){					layer.msg('批量导入返回码异常');					setTimeout(function(){						updateIFRspCodeLock = false;					},waitTime);				}			});		}	};	MV.prototype.getHistoricalReturnCode = function(obj){		if(!getHistoricalReturnCodeLock){			getHistoricalReturnCodeLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit("../autotest/autotest/")+"getHistoricalReturnCode.do",				"data": obj.data,				"onSuccess":function(data){					if (data.rspCd == "00000") {						getHistoricalReturnCodeLock = false;						if(data.dataes.length){							for(var i = 0 ,len = data.dataes.length; i< len; i++){								data.dataes[i].TS = GiGoldTool.date('YMDHIS',data.dataes[i].TS-0);								data.dataes[i].RSP_CODE_DESC = decodeURI(data.dataes[i].RSP_CODE_DESC);							}						}						ifSys.codeHistoryRender(data);					}else{						layer.msg(data.rspInf);						setTimeout(function(){							getHistoricalReturnCodeLock = false;						},waitTime);					}				},				'onError': function(data){					layer.msg('获取历史返回码异常');					setTimeout(function(){						getHistoricalReturnCodeLock = false;					},waitTime);				}			});		}	};	MV.prototype.addinvoker = function(obj){		if(!addinvokerLock){			addinvokerLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"addinvoker.do",				"data": obj.data,				"onSuccess":function(data){					if (data.rspCd == "00000") {						addinvokerLock = false;						$('#follow').html('<i class="icon-font">&#xe60d;</i>已关注').addClass('follow-active');					}else{						layer.msg(data.rspInf);						setTimeout(function(){							addinvokerLock = false;						},waitTime);					}				},				'onError': function(data){					layer.msg('添加关注异常');					setTimeout(function(){						addinvokerLock = false;					},waitTime);				}			});		}	};	MV.prototype.updateIFFields = function(obj){		if(!updateIFFieldsLock){			updateIFFieldsLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"updateIFFields.do",				"data": obj.data,				"onSuccess":function(data){					if (data.rspCd == "00000") {						updateIFFieldsLock = false;						layer.msg('批量导入Json成功');						$('#interfaceDetails').find('.interface-details-active > .case-details').addClass('hide').parent('.interface-details').click();					}else{						layer.msg(data.rspInf);						setTimeout(function(){							updateIFFieldsLock = false;						},waitTime);					}				},				'onError': function(data){					layer.msg('批量导入Json异常');					setTimeout(function(){						updateIFFieldsLock = false;					},waitTime);				}			});		}	};	//此处跑的自动测试的接口,待后台补充完善	MV.prototype.sheetList = function(obj){		if(!sheetlistLock){			sheetlistLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit("../autotest/autotest/")+"getAnalyse.do",				"data": obj.data,				"onSuccess":function(data){					if (data.rspCd == "00000") {						sheetlistLock = false;						if(data.dataes){							var temp = data.dataes[0];						}else{							$('#systemSheetBox').html('暂无测试数据');							return false;						}						var timeList = temp.OrderedHeadJNRSet,							now = temp.OrderedHeadJNRSet[0] ? temp.OrderedHeadJNRSet[0].substr(0,8) : false,							index = 0;						var OrderedHeadJNRSet = temp.OrderedHeadJNRSet,							initedDataSet = temp.initedDataSet;						for(var i = 0, len = OrderedHeadJNRSet.length;i < len; i++){							for(var key in initedDataSet){								if(OrderedHeadJNRSet[i] == key){									for(var k in initedDataSet[key]){										var obj = initedDataSet[key][k],											_len = obj.length,											one = 0, //成功											negative = 0; //未知										for(var k = 0; k<_len; k++ ){											if (obj[k] == 1){												one += 1;											} else if (obj[k] == -1){												negative += 1;											}										}										obj.rateOne = one/_len;										obj.rateNegativeOne = negative/_len;										initedDataSet[key][k] = obj;									}								}							}						}						if(now && now !== false){							for(var i = 0, len = timeList.length; i < len; i++){								var tem = timeList[i].substr(0,8);								if(tem > now){									index = i;									break;								}							}							if(index > 0){								temp.splitIndex = index;							}							ifSys.sheetBoxRender(temp);						}					}else{						layer.msg(data.rspInf);						$('#sheet').empty();						setTimeout(function(){							sheetlistLock = false;						},waitTime);					}				},				'onError': function(data){					layer.msg('获取报表数据异常');					$('#sheet').empty();					setTimeout(function(){						sheetlistLock = false;					},waitTime);				}			});		}	};	function rotateFn(ele,num){		if(num <= 50){			$("."+ele).append("<div class='passRound'></div><div class='refRound'></div>");			var degNum = 360-(num*3.6);			$("."+ele).find(".refRound")[0].style.transform = "rotate("+degNum+"deg)";		}else{			$("."+ele).append("<div class='passRound'></div><div class='passRound1'></div>");			var degNum = 360-(num*3.6)+180;			$("."+ele).find(".passRound1")[0].style.transform = "rotate("+degNum+"deg)";		}	}	function sheetFirstCache(_obj){		var tempData = _obj,			OrderedHeadJNRSet = tempData.OrderedHeadJNRSet,			initedDataSet = tempData.initedDataSet;		for(var i = 0, len = OrderedHeadJNRSet.length;i < len; i++){			for(var key in initedDataSet){				if(OrderedHeadJNRSet[i] == key){					for(var k in initedDataSet[key]){						var obj = initedDataSet[key][k],							_len = obj.length,							one = 0, //成功							negative = 0; //未知						for(var k = 0; k<_len; k++ ){							if (obj[k] == 1){								one += 1;							} else if (obj[k] == -1){								negative += 1;							}						}						obj.rateOne = one/_len;						obj.rateNegativeOne = negative/_len;						initedDataSet[key][k] = obj;					}				}			}		}		document.getElementById('systemSheetBox').innerHTML = template('detailBoxTest', tempData);		var mockPassRate = tempData.mockPassRate;		var CCcoverage = tempData.CCcoverage;		var IFcoverage = tempData.IFcoverage;		rotateFn("mockPassRate",mockPassRate);		rotateFn("CCcoverage",CCcoverage);		rotateFn("IFcoverage",IFcoverage);	}	MV.prototype.sheetFirstList = function(obj){		if(!sheetFirstListLock){			sheetFirstListLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit("../autotest/autotest/")+"getAnalyse.do",				"data": obj.data,				"onSuccess":function(data){					if (data.rspCd == "00000") {						sheetFirstListLock = false;						if(data.dataes){							sheetFirstCache(data.dataes[0]);							GiGoldTool.setLocalStorage('sheet',{								timeStamp: (new Date()).getTime(),								content: data.dataes[0]							});						}else{							$('#systemSheetBox').html('暂无测试数据');							return false;						}					}else{						layer.msg(data.rspInf);						setTimeout(function(){							sheetFirstListLock = false;						},waitTime);					}				},				'onError': function(data){					layer.msg('初始化获取报表数据异常');					setTimeout(function(){						sheetFirstListLock = false;					},waitTime);				}			});		}	};	MV.prototype.getTestingProgress = function(obj){		if(!getTestingProgressLock){			getTestingProgressLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit("../autotest/autotest/")+"getTestingProgress.do",				"data": obj.data,				"onSuccess":function(data){					if (data.rspCd == "00000") {						getTestingProgressLock = false;						ifSys.getTestingProgressRender(data.dataes[0]);					}else{						layer.msg(data.rspInf);						setTimeout(function(){							getTestingProgressLock = false;						},waitTime);					}				},				'onError': function(data){					layer.msg('查询测试进度的接口异常');					setTimeout(function(){						getTestingProgressLock = false;					},waitTime);				}			});		}	};	MV.prototype.delrspcdbyid = function(obj){//获取用例信息		if(!delrspcdbyidLock){			delrspcdbyidLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"delrspcdbyid.do",				"data": obj.data,				"onSuccess":function(data){					if (data.rspCd == "00000") {						delrspcdbyidLock = false;						obj.that.parents('tr').remove();						layer.msg('删除接口返回码成功');					}else{						layer.msg(data.rspInf);						setTimeout(function(){							delrspcdbyidLock = false;						},waitTime);					}				},				'onError': function(data){					layer.msg('删除接口返回码异常');					setTimeout(function(){						delrspcdbyidLock = false;					},waitTime);				}			});		}	};	MV.prototype.addInterface = function(obj){		if(!addInterfaceLock){			addInterfaceLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"addInterface.do",				"data": obj.data,				"onSuccess":function(data){					if (data.rspCd == "00000") {						addInterfaceLock = false;						//拼接新增接口						var interfaceHtml = '<div class="interface-details">'+							'<h5 class="interface-detail">'+								'<p><i>'+data.interFaceInfo.id+'</i>'+data.interFaceInfo.ifName+'</p>'+								'<div class="interface-op-box">'+									'<a class="interface-edit" href="javascript:;" title="编辑">'+										'<i class="icon-font">&#xe605;</i>'+									'</a>'+									'<a class="interface-del" href="javascript:;" title="删除">'+										'<i class="icon-font">&#xe606;</i>'+									'</a>'+									'<span>(0)</span>'+								'</div>'+								'<ul class="case-details hide"></ul>'+							'</h5>'+						'</div>';						$('#interfaceDetails').append(interfaceHtml);						layer.msg('新增接口成功');					}else{						setTimeout(function(){							addInterfaceLock = false;						},waitTime);						layer.msg(data.rspInf);					}				},				'onError': function(data){					layer.msg('新增接口成功');					setTimeout(function(){						addInterfaceLock = false;					},waitTime);				}			});		}		$fixLayer.empty().fadeOut(300);	};	MV.prototype.updateInterFace = function(obj){		if(!updateInterFaceLock){			updateInterFaceLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"updateInterFace.do",				"data": obj.data,				"onSuccess":function(data){					if (data.rspCd == "00000") {						updateInterFaceLock = false;						layer.msg('修改接口成功');						//ifSys.codeRender(data);					}else{						setTimeout(function(){							updateInterFaceLock = false;						},waitTime);						layer.msg(data.rspInf);					}				},				'onError': function(data){					layer.msg('修改接口出错');					setTimeout(function(){						updateInterFaceLock = false;					},waitTime);				}			});		}		$fixLayer.empty().fadeOut(300);	};	MV.prototype.deleteInterFaceById = function(obj){		if(!deleteInterFaceByIdLock){			deleteInterFaceByIdLock = true;			GiGoldPay.ajaxHandler({				"url": obj.url || GiGoldPay.ipBullShit()+"deleteInterFaceById.do",				"data": obj.data,				"onSuccess":function(data){					if (data.rspCd == "00000") {						deleteInterFaceByIdLock = false;						obj.that.parents('.interface-detail').remove();						layer.msg('删除接口成功');					}else{						layer.msg(data.rspInf);						setTimeout(function(){							deleteInterFaceByIdLock = false;						},waitTime);					}				},				'onError': function(data){					layer.msg('删除接口出错');					setTimeout(function(){						deleteInterFaceByIdLock = false;					},waitTime);				}			});		}	};	//VIEW	MV.prototype.userNameRender = function(){		var userName = GiGoldTool.getUrlVal('userName');		userName = decodeURI(userName);		var html = template('userNameBox', {useName:userName});		document.getElementById('userName').innerHTML = html;	};	MV.prototype.getIfsysFeedRender = function(data){		var html = template('getIfsysFeedBox', data);		document.getElementById('getIfsysFeed').innerHTML = html;		setTimeout(function(){			colorFullStart();		},100);	};	MV.prototype.getInterfaceChangesRender = function(data){		var html = template('getIfsysFeedInterfaceBox', data);		document.getElementById('getIfsysFeedInterface').innerHTML = html;	};	MV.prototype.sysListRender = function(data){		var html = template('sysSelectBox', data);		document.getElementById('sysSelect').innerHTML = html;	};	MV.prototype.interfaceListRender = function(data){		var html = template('interfaceDetailsBox', data);		document.getElementById('interfaceDetails').innerHTML = html;	};	MV.prototype.pagesRender = function(data){		var html = template('pagesBox', data);		document.getElementById('pages').innerHTML = html;	};	MV.prototype.codeRender = function(data){		var html = template('resCodeBodyBox', data);		document.getElementById('resCodeBody').innerHTML = html;		var _html = template('resCodeBodyViewBox', data);		document.getElementById('resCodeBodyView').innerHTML = _html;	};	MV.prototype.codeHistoryRender = function(data){		var html = template('resCodeBodyHistoryBox', data);		document.getElementById('resCodeBodyHistory').innerHTML = html;	};	MV.prototype.fixLayerBox1 = function(data){		var html = template('fixLayerBox1', data);		document.getElementById('fixLayer').innerHTML = html;	};	MV.prototype.fixLayerBox2 = function(data){		var html = template('fixLayerBox2', data);		document.getElementById('fixLayer').innerHTML = html;	};	MV.prototype.resBodyReder = function(data){		var html = template('resBodyBox', data);		document.getElementById('resBody').innerHTML = html;	};	MV.prototype.reqBodyRender = function(data){		var html = template('reqBodyBox', data);		document.getElementById('reqBody').innerHTML = html;	};	MV.prototype.detailInfoBoxRender = function(data){		data.originHost = window.location.origin;		var html = template('detailInfoBox', data);		document.getElementById('detailInfo').innerHTML = html;		document.getElementById('detailInfoView').innerHTML = html;	};	MV.prototype.sheetBoxRender = function(data){		var html = template('sheetBox', data);		document.getElementById('sheet').innerHTML = html;		$('#sheet').find('.spare-box').eq(data.splitIndex).after('<div class="split"><div>');	};	MV.prototype.getinvokerlistRender = function(data){		var html = template('getinvokerlistBox', data);		document.getElementById('getinvokerlist').innerHTML = html;	};	MV.prototype.getInterFaceFieldsJson1 = function(data){		var html = template('reqJsonBox', data);		document.getElementById('reqJson').innerHTML = html;	};	MV.prototype.getInterFaceFieldsJson2 = function(data){		var html = template('resJsonBox', data);		document.getElementById('resJson').innerHTML = html;	};	MV.prototype.iterfaceDescRender = function(data){		var html = template('iterfaceDescBox', data);		document.getElementById('iterfaceDesc').innerHTML = html;	};	MV.prototype.getTestingProgressRender = function(data){		var html = template('progressBoxs', data);		document.getElementById('progressBox').innerHTML = html;	};	//INIT	var ifSys = new MV();	(function init(){		//系统信息查询		ifSys.getAllSysInfo({});		//接口信息查询		ifSys.queryByCondition({			data: {				ifName: "",				ifProId: GiGoldTool.cookie('proid') || 0,				ifSysId: GiGoldTool.cookie('sysid') || 0,				pageNum: GiGoldTool.cookie('pagenum')-0 || 1			}		});		//获取接口系统最近的Feed		ifSys.getIfsysFeed({data:{			"limit": 200		}});   		// 获取FreeSearch.js组件        ifSys.freeSearch({            "data":{}        })		//测试进程		ifSys.getTestingProgress({});		//每个10s刷新测试进程		setInterval(function(){			ifSys.getTestingProgress({});		},10000);		//下次测试时间		setInterval(function(){			var now = new Date();			var min = (59-now.getMinutes()),second = (60-now.getSeconds());			min = min >= 10? min : '0'+min;			second = second >= 10? second : '0'+second;			$('#timeOut').html('离下次测试还有<span>'+min+'<i>分</i>'+second+'<i>秒</i></span>');		},1000);		var userName = GiGoldTool.getUrlVal('userName');		$('#userNameHeader').find('span').html(userName);		//当前时间点与缓存时间点在一天之内,并且当前缓存时间小于当前时间一小时读取缓存,否则重新获取		//var cache = GiGoldTool.getLocalStorage('sheet');		//if(cache && cache.timeStamp){		//	var nowDate = new Date().getTime(),		//		nowHours = (new Date()).getHours(),		//		preHours = (new Date(cache.timeStamp)).getHours();		//	if((nowDate - cache.timeStamp <= 24*3600) && (nowHours == preHours)){		//		sheetFirstCache(cache.content);		//		console.log('报表数据读取的缓存');		//	} else {		//		ifSys.sheetFirstList({data:{		//			size: '15'		//		}});		//	}		//} else {		//	ifSys.sheetFirstList({data:{		//		size: '15'		//	}});		//}	})();	//EXPORT	module.exports = {		ifSys: ifSys	};});